{"name": "test_demoqa_form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: Unable to find session with ID: bf37a4ae907ec751d0fa3934ba191199\nBuild info: version: '4.25.0', revision: '030fcf7918'\nSystem info: os.name: 'Linux', os.arch: 'amd64', os.version: '5.15.153.1-microsoft-standard-WSL2', java.version: '17.0.12'\nDriver info: driver.version: unknown\nStacktrace:\norg.openqa.selenium.NoSuchSessionException: Unable to find session with ID: bf37a4ae907ec751d0fa3934ba191199\nBuild info: version: '4.25.0', revision: '030fcf7918'\nSystem info: os.name: 'Linux', os.arch: 'amd64', os.version: '5.15.153.1-microsoft-standard-WSL2', java.version: '17.0.12'\nDriver info: driver.version: unknown\n\tat org.openqa.selenium.grid.sessionmap.local.LocalSessionMap.get(LocalSessionMap.java:116)\n\tat org.openqa.selenium.grid.sessionmap.SessionMap.getUri(SessionMap.java:84)\n\tat org.openqa.selenium.grid.router.HandleSession.lambda$loadSessionId$4(HandleSession.java:223)\n\tat io.opentelemetry.context.Context.lambda$wrap$2(Context.java:224)\n\tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:180)\n\tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\n\tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\n\tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\n\tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\n\tat org.openqa.selenium.grid.router.Router.execute(Router.java:87)\n\tat org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0(EnsureSpecCompliantResponseHeaders.java:34)\n\tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\n\tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\n\tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\n\tat org.openqa.selenium.remote.http.Route$NestedRoute.handle(Route.java:270)\n\tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\n\tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\n\tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\n\tat org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0(AddWebDriverSpecHeaders.java:35)\n\tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\n\tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\n\tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\n\tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\n\tat org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0(SeleniumHandler.java:44)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:840)", "trace": "@pytest.fixture(scope=\"function\")\n    def driver():\n        options = Options()\n        #options.add_argument(\"--headless\")  # Opcional: ejecuta Chrome en modo headless (sin interfaz grÃ¡fica)\n        options.add_argument(\"--no-sandbox\")\n        options.add_argument(\"--disable-dev-shm-usage\")\n    \n        # Conectar al contenedor de Selenium\n        driver = webdriver.Remote(\n            command_executor='http://localhost:4444/wd/hub',\n            options=options\n        )\n        yield driver\n>       driver.quit()\n\nDockerInforme\\DockerPyTestAllure.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:476: in quit\n    self.execute(Command.QUIT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000175D9719D90>\nresponse = {'status': 404, 'value': '{\\n  \"value\": {\\n    \"error\": \"invalid session id\",\\n    \"stacktrace\": \"org.openqa.selenium....on: \\'5.15.153.1-microsoft-standard-WSL2\\', java.version: \\'17.0.12\\'\\\\nDriver info: driver.version: unknown\"\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: Unable to find session with ID: bf37a4ae907ec751d0fa3934ba191199\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '5.15.153.1-microsoft-standard-WSL2', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE       org.openqa.selenium.NoSuchSessionException: Unable to find session with ID: bf37a4ae907ec751d0fa3934ba191199\nE       Build info: version: '4.25.0', revision: '030fcf7918'\nE       System info: os.name: 'Linux', os.arch: 'amd64', os.version: '5.15.153.1-microsoft-standard-WSL2', java.version: '17.0.12'\nE       Driver info: driver.version: unknown\nE       \tat org.openqa.selenium.grid.sessionmap.local.LocalSessionMap.get(LocalSessionMap.java:116)\nE       \tat org.openqa.selenium.grid.sessionmap.SessionMap.getUri(SessionMap.java:84)\nE       \tat org.openqa.selenium.grid.router.HandleSession.lambda$loadSessionId$4(HandleSession.java:223)\nE       \tat io.opentelemetry.context.Context.lambda$wrap$2(Context.java:224)\nE       \tat org.openqa.selenium.grid.router.HandleSession.execute(HandleSession.java:180)\nE       \tat org.openqa.selenium.remote.http.Route$PredicatedRoute.handle(Route.java:397)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.grid.router.Router.execute(Router.java:87)\nE       \tat org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0(EnsureSpecCompliantResponseHeaders.java:34)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.http.Route$NestedRoute.handle(Route.java:270)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.http.Route$CombinedRoute.handle(Route.java:360)\nE       \tat org.openqa.selenium.remote.http.Route.execute(Route.java:69)\nE       \tat org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0(AddWebDriverSpecHeaders.java:35)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.remote.ErrorFilter.lambda$apply$0(ErrorFilter.java:44)\nE       \tat org.openqa.selenium.remote.http.Filter$1.execute(Filter.java:63)\nE       \tat org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0(SeleniumHandler.java:44)\nE       \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\nE       \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\nE       \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\nE       \tat java.base/java.lang.Thread.run(Thread.java:840)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "steps": [{"name": "Abrir DemoQA pÃ¡gina", "status": "passed", "start": 1728228854088, "stop": 1728228868093}, {"name": "Completar el formulario", "status": "passed", "start": 1728228868093, "stop": 1728228873243}, {"name": "Hacer scroll y enviar el formulario", "status": "passed", "start": 1728228873243, "stop": 1728228874311}], "start": 1728228854087, "stop": 1728228875775, "uuid": "b40cbe50-e6d1-4d4d-b22c-ccb4b93e7784", "historyId": "d381453e873e29fd9bbd03d9e4d4622d", "testCaseId": "d381453e873e29fd9bbd03d9e4d4622d", "fullName": "DockerInforme.DockerPyTestAllure#test_demoqa_form", "labels": [{"name": "feature", "value": "DemoQA Form Test"}, {"name": "story", "value": "Fill and submit text box form"}, {"name": "parentSuite", "value": "DockerInforme"}, {"name": "suite", "value": "DockerPyTestAllure"}, {"name": "host", "value": "DESKTOP-RLBB3ND"}, {"name": "thread", "value": "16336-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "DockerInforme.DockerPyTestAllure"}]}